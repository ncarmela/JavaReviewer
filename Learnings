UserInput.java
- Learned how to use scanner

=================================================================================

Arithmetic.java
- % modulus operator
- conversion from Strings to non-primitive vice versa
        
        // String ➜ int	        Integer.parseInt(String)
        // String ➜ float	    Float.parseFloat(String)
        // String ➜ double	    Double.parseDouble(String)
        // float ➜ String	    Float.toString(float) or String.valueOf(float)
        // double ➜ String	    Double.toString(double) or String.valueOf(double)
        // Any primitive ➜ String	String.valueOf(value)

=================================================================================

RandomNumbers.java
- import java.util.Random;  
- Random random = new Random(bound or kung hanggang saan irarandom na number);

=================================================================================

PrintF.java
- printf = is a method para madali iinsert ung data hindi na iplus plus ba
- % eto symbol panimula
- [flags example + or - or , ( para maenclosed negative, space naman para nakatab mga positive and align ]
- [width 0 padding exmaple 04d para 4 digits, pag no 0 padding ex 4d wala 0 pero may padding]
- [.precision para maround off for price .3 .2 ganyan][specifier-character]

        // String name = "Alice"; //%s
        // char grade = 'A'; //%c
        // int age = 20; //%d
        // double gpa = 3.75; //%f
        // boolean isGraduated = true; //%b

        // System.out.printf("Hello %s,\n",name);
        // System.out.printf("Your grade is %c.\n", grade);
        // System.out.printf("GPA is %.2f, Gradutated: %b", gpa, isGraduated);
        // System.out.printf("The amount after %d years is: %,.2f\n", years, amount);

=================================================================================

NestedIFStatements.java
- if statement sa loob ng if statements
- pag if statement need ng RETURN;
- pag multiple if-statement naman hindi na need kasi ung last if serves as return already

=================================================================================

StringMethods.java
- ibat ibang klase ng string methods. pang string lang
- example name.length()
- nalalaman computer na method ang code kapag may ()
- sa pag split:
       // String[] splittedStrings = name.split(" ");

       // System.out.println(splittedStrings[0]); // Output: nina kasi mahahati sa space
       // System.out.println(splittedStrings[1]); // Output: nambio


EXTRA       
- 2 loop options for printing Strings inside a String[] 

      option 1:
            int i;

            for(i=0; i < list.length; i++) {
                System.out.println(list[i]);
            }
        
        option 2 (shorter version):    

            //'fruit' ay temporary variable, so kada run ay magiiba ang value ni fruit
            // ':' for each fruit in list
            // 'list' is The array (or collection) you're looping through 
            for (String fruit : list) {
                System.out.println(fruit);
            }

- pag replace ng string sa array:
            // pag magrereplace ng string array di pwede .replace pang String lang un

            String fruits = "apple,banana,orange";
            String[] list = fruits.split(","); // Splitting the string into an array and replacing the first element with "kiwi"
    this   -->   list[0] = "kiwi";  

=================================================================================

Substring.java
- kung mayroong .concat() para pagsamahin meron ding panghiwalay
- .substring(startIndex, endIndex) - extracts a substring from the string
- to remember '+1', parameters or arguments ang nasa loob ng () .......  example (email.lastIndexOf(".") + 1, email.length())

=================================================================================

WeightConverter.java
- learned na need magdeclare value sa variable kung may variable na asa loob ng if statements. kasi wat ip di mag tuloy if statement eh di wala value ung variable, masisira yan siya haha

=================================================================================

TernaryOperator.java
- shorter version ng if-else 
- (parameter condition) ? valueIfTrue : valueIfFalse

=================================================================================

EnhancedSwitches.java
- This expression can be of type byte, short, int, char, String. BAWAL BOOLEAN, DOUBLE, CONDITIONS AND COMPARISONS
- need lagi ng 'break;' sa dulo
- bawal "" only '' 


EXTRA
sa if else statement learning:

        //Double.isNaN(x); // ✅ true
        //x.isNaN()     // ❌ Error: cannot invoke isNaN() on primitive double

=================================================================================

LogicalOperator.java
        // && = AND
        // || = OR
        // ! = NOT
- by group ang accept, deny

=================================================================================

whileLoop.java

- while(condition) You don’t know exactly how many times the loop should run.
- *The loop depends on something that changes inside it*

- a loop will run is the condition is true, and will only stop once the condition is false
- bawal magwhile loop kung walang magpapaiba ng value sa condition, kasi magkakaroon ng infinite loop
- while ay gagana hanggat di siya true

- do while - mauuna do 

    // *while loop*- You want to check the condition before running any code
    // *do while* - You want the loop to run at least once before checking the condition

- gamitin mo *while loop* kung ayaw mo na irun ung loop, example nag false na condition bago pa ung loop statement. di niya na irurun ung loop

- gamitin mo *do while* if want mo pa din mag run loop kahit isang beses lang


=================================================================================

zaNumberGuessingGame.java

- *break* statement immediately exits the loop, no matter what the condition is.

=================================================================================

sbExerciseForLoopAndStringArray.java

- "new *Class*" word is used to store new values
- String[] fruits = new String[5]; 5 is kung ilan ipapasok or new string sa array

- what happens here:
        // fruits[countie] = scanner.nextLine(); ---> countie is int value, kada scan ay mag mapasok sa array ng current value ni countie
        // countie++; ---> mag ++ para makapagscan ulit bago with new index

=================================================================================

ForLoops.java

- *for loop* = execute some code a CERTAIN amount of time
        // for(initialization; condition; update)

- pag naman *while loop* You don’t know exactly how many times the loop should run.
- Thread.sleep(500) ilang mins after mag loop

=================================================================================

BreakContinue

- *break* = break out of a loop (stop)
- *continue* = skip current iteration of a loop (skip) 
        // example nag ==5 iiskip niya ung loop and then continue ulit sa susunod

learning
- Modulo is remainder (kumbaga ano ung sobra before mahit ung ididivide) like 5/2, instead of 2.5 -> 5 ang sagot is 1 kasi 2+2 = 4 + 1 = 5
=================================================================================

NestedLoop

- loop inside a loop

learning


=================================================================================

Methods.java

- method = a block of reusable code that is executed when () is called
      // anything u send a method is known as argument inside the ()

- methods are unfamiliar with other variable outside, so you have to set it up with matching parameters sa loob ng ()

 example : *HBD(name);*    *static void HBD(String name){*
  // di need magkamukha naming ang need lang same is the data type

- a *return* keyword will return the value once the method ends  

=================================================================================

OverloadedMethods.java

- overloaded methods = methods that share the same name,
                       but different parameters.
                       signature = name + parameters     

=================================================================================

VariableScope.java

- java prefer local scope variable kesa ung asa labas
- class variables are declared inside of a class, and recognized throughout the class
- local variable will only be recognized by another method if you will pass the arguments like in the previous *method.java* 

=================================================================================

=================================================================================

=================================================================================


=================================================================================

=================================================================================

=================================================================================

=================================================================================


=================================================================================

=================================================================================

=================================================================================

=================================================================================


=================================================================================

=================================================================================

=================================================================================

=================================================================================


=================================================================================

=================================================================================

=================================================================================

=================================================================================


=================================================================================

=================================================================================

=================================================================================


